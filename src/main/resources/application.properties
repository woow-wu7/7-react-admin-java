# 注意
# 描述：application-production.properties 文件一般不写在本地，而是直接写在服务器上
# 愿意：因为写在本地很容器暴露了服务端的配置和相关信息，因为本地是和github关联的，这两个地方都容器泄漏代码和信息
# 这里我就和application.properties保持一致了

server.port=7777

# (1)
# 定义数据源组件
# 已弃用 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# 注意 spring.datasource.url="jdbc:mysql://localhost:3306/数据库名称?时区信息"
# 分别是 ( 数据库url ) ( 数据库驱动 ) ( 用户名 ) ( 密码 )
spring.datasource.url=jdbc:mysql://localhost:3306/7-react-admin-java?serverTimezone=GMT%2B8&useSSL=false
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root

# (2)
# spring-boot-devtools 热更新
# 要实现热更新还需要设置两个地方，具体见我的博客 https://juejin.cn/post/6929145638898794503
# 注意：
# 热更新时，当修改ui相关的代码即修改html时，java项目是不会重启的，因为没有修改server相关代码
# 如果非要当修改html时，也去从新启动java程序，在需要做下面的设置
# 使用vue或者react的单页应用请忽略
# spring.devtools.restart.exclude=static/**,public/**

# (3)
# 设置环境变量
# 第一段的github起到分类的作用，便于识别
# 1. 比如： server 和 github 就是不同的两种类型
# 2. 使用时需要使用 @Value 注解来引入这里定义的属性变量
github.client.client_id = 982573d16925889ea84c
github.client.redirect_uri = http://localhost:7777/callback
TX_YUN_IP = 120.53.220.141

# (4)
# 日志相关
# logging.level.com.example.demo.mapper = debug 这个的作用是只去打印mapper相关的debug的日志
# 上面一行的 logger.level.xxx 其中xxx表示 ( java文件夹开始的mapper所在的文件夹路径 )
# logging.level.root = info 用来设置只打印 ( info ) 级别的日志
spring.application.name = 7-react-admin-java
logging.file.name = ${spring.application.name}.log
logging.level.root = info
logging.level.com.example.demo.mapper = debug
#spring.output.ansi.enabled = ALWAYS
#debug = false
#trace = false
